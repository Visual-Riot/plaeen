// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  favouritedGames  favouritedGame[]
  teamUsers     TeamUser[]  // Relation to TeamUser to track team memberships

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id String  @id @default(cuid())
  email      String
  token      String
  expires    DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String  @id @default(cuid())
  email      String
  token      String
  expires    DateTime

  @@unique([email, token])
}

model Team {
  id          Int           @id @default(autoincrement())
  teamName    String        // Team name
  image       String        // Team image URL or file path
  createdAt   DateTime      @default(now()) // Timestamp for when the team is created
  updatedAt   DateTime      @updatedAt      // Automatically update when the record is modified
  gameSessions GameSession[]  // Add this to establish the relation to GameSession
  teamUsers    TeamUser[]    // Relation to TeamUser to track players in the team
}

model GameSession {
  id              Int      @id @default(autoincrement())
  gameName        String   // The name of the game
  gameId          Int      // Game ID to match the external source
  backgroundImage String?  // URL for the game's background image
  genres          String[] // List of game genres (as an array of strings)
  platforms       String[] // List of platforms (as an array of strings)
  rating          Float?   // Game rating
  team            Team     @relation(fields: [teamId], references: [id])
  teamId          Int
  createdAt       DateTime @default(now())
}

model favouritedGame {
  id        Int      @id @default(autoincrement())
  userId    String      // The ID of the user who favourited the game
  gameId    Int      // ID of the game that was favourited
  gameName  String   // Name of the favourited game
  backgroundImage String? // URL of the game's background image
  genres    String[] // Array of game genres
  platforms String[] // Array of platforms
  rating    Float?   // Game rating
  favouritedAt DateTime @default(now()) // Timestamp when the game was favourited

  user      User     @relation(fields: [userId], references: [id]) // Relation to the user
}

model TeamUser {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  status    String   @default("pending") // Status field to track if player is pending or confirmed
  createdAt DateTime @default(now())     // Timestamp for when the player was added to the team

  @@unique([teamId, userId]) // Ensure that each player can only be added to a team once
}